from gym_super_mario_bros.actions import RIGHT_ONLY, COMPLEX_MOVEMENT, SIMPLE_MOVEMENT
from nes_py.wrappers import JoypadSpace
from Utils import DQLAgent, NNModel, Utils
from skimage.transform import resize
from skimage import img_as_ubyte
import gym_super_mario_bros


class DQLMarioAgent(DQLAgent.DQLAgent):
    def __init__(self, action_type, batch_size, model_type, success_margin, success_score, memory_size,
                 record_video, target_model, project, wrapper_type):
        super().__init__(action_type, batch_size, model_type, success_margin, success_score, memory_size,
                         record_video, target_model, project)

        self.env = gym_super_mario_bros.make('SuperMarioBros-v0')
        if wrapper_type == 'COMPLEX':
            self.env = JoypadSpace(self.env, COMPLEX_MOVEMENT)  # -> 12
        elif wrapper_type == 'SIMPLE':
            self.env = JoypadSpace(self.env, SIMPLE_MOVEMENT)  # -> 7
        else:
            self.env = JoypadSpace(self.env, RIGHT_ONLY)  # -> 5

        self.action_size = self.env.action_space.n
        self.num_states = 1
        self.state_single_size = 80
        self.state_size = (self.state_single_size, self.state_single_size)
        self.action = self.env.action_space.sample()
        self.first_last_x_pos = self.env.env.env._x_position
        self.max_distance = self.first_last_x_pos

        self.DLModel = NNModel.DLModel(env=self.env, action_size=self.action_size, state_size=self.state_single_size,
                                       states=self.num_states, model_type=model_type, output_dir=self.others_dir)

    def append_new_frame(self):
        """ Save generated env's frame """
        self.renders.append(img_as_ubyte(resize(self.env.render(mode='rgb_array'), (480, 480, 3))))

    def get_first_state(self):
        """
        :return: inicial state
        """
        first_state = self.env.reset()
        return Utils.prepare_initial_state(first_state, self.state_size, channels=1)

    def get_first_x_pos(self):
        """
        :return: inicial x position
        """
        return self.first_last_x_pos

    def prepare_state(self, next_state, channels=1):
        """
        Remove upper image info, reduce channels, and reduce image size
        :param channels: number of layers
        :param next_state: state to process
        :return: preprocessed image generated by env
        """
        return Utils.prepare_initial_state(next_state, self.state_size, channels=channels)

    def reset_max_distance(self):
        """ Reset episode max distance """
        self.max_distance = self.first_last_x_pos

    def update_max_distance(self, dist):
        """
        Update episode max distance
        :param dist: new distance
        :return: new max distance
        """
        if dist > self.max_distance:
            self.max_distance = dist
        return self.max_distance
